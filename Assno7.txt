*****************************************************
ASSIGNMENT NO: 07
Title: Intermediate code genaration using LEX and YACC for 
        control flow and switch case statement.

******************************************************

 //as2.l  file: 

ALPHA [A-Za-z]
DIGIT [0-9]
%%
{ALPHA}({ALPHA}|{DIGIT})* return ID;
{DIGIT}+ {yylval =atoi(yytext); return NUM;}
[\n \t] yyterminate();
. return yytext[0];
%%


//as2.y file 


%token ID NUM
%right '='
%left '+' '-'
%left '*' '/'
%left UMINUS
%%

s:ID{push();} '=' {push();} E {codegen_assign();}
;
E : E '+' {push();} T{codegen();}
    | E '-' {push();} T{codegen();}
    | T
;
T : T '*' {push();} F{codegen();}
    | T '/' {push();} F{codegen();}
    | F
;
F : '(Ã)'
    | '-'{push();} F{codegen_umin();} %prec UMINUS
    | ID {push();}
    | NUM {push();}
;
%%
#include "lex.yy.c"
#include<ctype.h>
#include<string.h>
char st[100][10];
int top=0;
char i_[2]="0";
char temp[2]="t";
main()
{
        printf("\n Enter the expression : ");
        yyparse();
}
push()
{
        strcpy(st[++top],yytext);
}
codegen()
{
        strcpy(temp,"t");
        strcat(temp,i_);
        printf("%s=%s%s%s\n",temp,st[top-2],st[top-1],st[top]);
        top-=2;
        strcpy(st[top],temp);
        i_[0]++;
}
codegen_umin()
{
        strcpy(temp,"t");
        strcat(temp,i_);
        printf("%s=%s\n ",temp,st[top]);
        top--;
        strcpy(st[top],temp);
        i_[0]++;
}
codegen_assign()
{
        printf("%s=%s\n",st[top-2],st[top]);
        top-=2;
}
yyerror(char *s)
{
        printf("ERROR : %s ",s);
}

/*********************************************************/

OUTPUT :

[t19@itlserver ~]$ lex as2.l
[t19@itlserver ~]$ yacc -d as2.y
[t19@itlserver ~]$ cc y.tab.c -ll
[t19@itlserver ~]$ ./a.out

Enter the expression : a=b+c*d-e/f
t0=c*d
t1=b+t0
t2=e/f
t3=t1-t2
a=t3

/**************************************************************/
